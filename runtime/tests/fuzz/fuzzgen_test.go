//go:generate go test -tags=fuzzgen -test.run=Fuzzgen -test.count=1 -test.v $GOFILE -args doFuzzgen
//go:build generate || fuzzgen
// +build generate fuzzgen

/*
 * Cadence - The resource-oriented smart contract programming language
 *
 * Copyright 2021 Dapper Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fuzz

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"os"
	"os/exec"
	"strconv"
	"strings"
	"testing"
)

// fuzz/fuzzgen_test.go
// * runs the full test suite with a special build tag "fuzzgen"
// * collects notes from those tests (including the ones here, below)
// * generates fuzz/fuzzgen_data.go from those notes

func TestFuzzgen(t *testing.T) {
	if os.Args[len(os.Args)-1] != "doFuzzgen" {
		return // regular test run; not generating. /dont/ do fuzzgen.
	}

	// find toplevel cadence directory
	if _, err := os.Stat("go.mod"); err != nil {
		if _, err := os.Stat("../../../go.mod"); err != nil {
			panic(err)
		}
		if err := os.Chdir("../../../"); err != nil {
			panic(err)
		}
	}

	cmd := exec.Command("go", "test", "-tags=fuzzgen", "-test.count=1", "-test.v", "-json", "./...")
	var stdoutBuf bytes.Buffer
	var stderrBuf bytes.Buffer
	cmd.Stderr = io.Writer(&stderrBuf)
	cmd.Stdout = io.MultiWriter(&stdoutBuf, &progress{})
	cmdRunErr := cmd.Run()
	fmt.Fprint(os.Stderr, "\n")

	// collect test output from json lines
	testOutputs := map[string]string{}
	for _, line := range bytes.Split(stdoutBuf.Bytes(), []byte{'\n'}) {
		if len(strings.TrimSpace(string(line))) == 0 || line[0] != '{' {
			continue
		}
		lineobj := map[string]interface{}{}
		if err := json.Unmarshal(line, &lineobj); err != nil {
			panic(err)
		}
		if s, ok := lineobj["Output"].(string); ok {
			if testName, ok := lineobj["Test"].(string); ok {
				testOutputs[testName] += s
			} else {
				testOutputs[""] += s
			}
		}
	}

	f, _ := os.OpenFile("runtime/tests/fuzz/fuzzgen_data.go.tmp", os.O_RDWR|os.O_CREATE, 0644)
	fmt.Fprint(f, "// Code generated by fuzzgen_test.go. DO NOT EDIT.\n\n")
	fmt.Fprint(f, "package fuzz\n\n")

	for testName, output := range testOutputs { //nolint:maprangecheck
		for _, line := range strings.Split(output, "\n") {
			if strings.Contains(line, "FUZZGEN:") {
				note := strings.TrimSpace(line[strings.Index(line, "FUZZGEN:")+len("FUZZGEN:"):])
				if strings.HasPrefix(note, "RAWTXT\t") { // plain text output from test?
					if s, err := strconv.Unquote(note[len("RAWTXT\t"):]); err == nil {
						fmt.Fprintln(f, "///"+strings.Repeat("/", len(testName))+"////")
						fmt.Fprintln(f, "// "+testName+" vvv")
						fmt.Fprintln(f, "")
						fmt.Fprint(f, s) // pass through unmodified.
						fmt.Fprintln(f, "")
						fmt.Fprintln(f, "// "+testName+" ^^^")
						fmt.Fprintln(f, "///"+strings.Repeat("/", len(testName))+"////")
					} else {
						panic(err)
					}
				}
			}
		}
	}

	_ = f.Close()
	newFileName := strings.TrimSuffix(f.Name(), ".tmp")

	if cmdRunErr == nil { // success?
		if err := os.Rename(f.Name(), newFileName); err != nil {
			panic(err)
		}
		fmt.Println("created", newFileName)
		return
	}

	// testsuite run failed with error; print and panic.
	println("STDOUT vvv")
	for testName, output := range testOutputs { //nolint:maprangecheck
		for _, outputLine := range strings.Split(output, "\n") {
			outputLine = strings.TrimSpace(outputLine)
			if len(outputLine) == 0 ||
				strings.HasPrefix(outputLine, "202") ||
				strings.HasPrefix(outputLine, "FUZZGEN:") ||
				strings.HasPrefix(outputLine, "=== RUN") ||
				strings.HasPrefix(outputLine, "=== PAUSE") ||
				strings.HasPrefix(outputLine, "=== CONT") ||
				strings.HasPrefix(outputLine, "--- PASS:") {
				continue
			}
			fmt.Println(testName, outputLine)
		}
	}
	println("STDOUT ^^^")
	println("STDERR vvv")
	println(stderrBuf.String())
	println("STDERR ^^^")
	fmt.Println("failed to create", newFileName)
	fmt.Println("see failure at", f.Name())
	panic(cmdRunErr)
}

type progress struct{ wroteLines int }

func (p *progress) Write(bytes []byte) (n int, err error) {
	for _, b := range bytes {
		if b == '\n' {
			if p.wroteLines == 0 {
				fmt.Fprint(os.Stderr, "\nfuzzgen: ")
			}
			p.wroteLines++
			if (p.wroteLines % 50) == 0 {
				fmt.Fprint(os.Stderr, ".")
				if ((p.wroteLines / 50) % 70) == 0 {
					fmt.Fprint(os.Stderr, "\nfuzzgen: ")
				}
			}
		}
	}
	return len(bytes), nil
}

func TestOrGenerateExampleFuzzgenMessage(t *testing.T) {
	log.Printf("\nFUZZGEN:RAWTXT\t%q", "// hello from example fuzzgen test.\n")
}
